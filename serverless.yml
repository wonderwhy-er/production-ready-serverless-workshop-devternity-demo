service: workshop-wonderwhy

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  tags:
    TEAM: test
  environment:
    log_level: ${self:custom.logLevel.${self:custom.stage}, self:custom.logLevel.default}

custom:
  stage: ${opt:stage, self:provider.stage}
  logLevel:
    prod: INFO
    default: DEBUG

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: 
        Fn::Join:
          - ''
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants"
      orders_api: 
        Fn::Join:
          - ''
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/orders"

  get-restaurants:
    handler: functions/get-restaurants.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource:
          Fn::GetAtt:
            - restaurantsTable
            - Arn
    events:
      - http:
          path: /restaurants/
          method: get          
    environment:
      restaurants_table: 
        Ref: restaurantsTable

  search-restaurants:
    handler: functions/search-restaurants.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource:
          Fn::GetAtt:
            - restaurantsTable
            - Arn
    events:
      - http:
          path: /restaurants/search
          method: post
    environment:
      restaurants_table:
        Ref: restaurantsTable

  place-order:
    handler: functions/place-order.handler
    iamRoleStatements:
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource:
          Fn::GetAtt:
            - orderEventsStream
            - Arn
    events:
      - http:
          path: /orders
          method: post
    environment:
      order_events_stream: 
        Ref: orderEventsStream

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    iamRoleStatements:
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource:
          Fn::GetAtt:
            - orderEventsStream
            - Arn
      - Effect: Allow
        Action: sns:Publish
        Resource:
          Ref: restaurantNotificationTopic
    events:
      - stream:
          type: kinesis
          arn: 
            Fn::GetAtt:
              - orderEventsStream
              - Arn
    environment:
      order_events_stream:
        Ref: orderEventsStream
      restaurant_notification_topic: 
        Ref: restaurantNotificationTopic

resources:
  Resources:
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/${self:service}/${self:provider.stage}/table_name}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: ${ssm:/${self:service}/${self:provider.stage}/stream_name}
        ShardCount: 1

    restaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${ssm:/${self:service}/${self:provider.stage}/restaurant_topic_name}
        TopicName: ${ssm:/${self:service}/${self:provider.stage}/restaurant_topic_name}
    mySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: wonderwhy.er@gmail.com
        Protocol: email
        TopicArn: 
          Ref: restaurantNotificationTopic            